load("@llvm-project//mlir:tblgen.bzl", "gentbl_cc_library", "td_library")

td_library(
    name = "TdFiles",
    srcs = [
        "include/columnar/Columnar.td",
    ],
    includes = ["include"],
    deps = [
        "@llvm-project//mlir:BufferizableOpInterfaceTdFiles",
        "@llvm-project//mlir:BuiltinDialectTdFiles",
        "@llvm-project//mlir:InferTypeOpInterfaceTdFiles",
        "@llvm-project//mlir:OpBaseTdFiles",
        "@llvm-project//mlir:PassBaseTdFiles",
        "@llvm-project//mlir:SideEffectInterfacesTdFiles",
    ],
)

gentbl_cc_library(
    name = "IncGen",
    tbl_outs = [
        (
            ["-gen-dialect-decls"],
            "include/columnar/Dialect.h.inc",
        ),
        (
            ["-gen-dialect-defs"],
            "include/columnar/Dialect.cpp.inc",
        ),
        (
            ["-gen-enum-decls"],
            "include/columnar/Enums.h.inc",
        ),
        (
            ["-gen-enum-defs"],
            "include/columnar/Enums.cpp.inc",
        ),
        (
            ["-gen-attrdef-decls"],
            "include/columnar/Attrs.h.inc",
        ),
        (
            ["-gen-attrdef-defs"],
            "include/columnar/Attrs.cpp.inc",
        ),
        (
            ["-gen-typedef-decls"],
            "include/columnar/Types.h.inc",
        ),
        (
            ["-gen-typedef-defs"],
            "include/columnar/Types.cpp.inc",
        ),
        (
            ["-gen-op-decls"],
            "include/columnar/Ops.h.inc",
        ),
        (
            ["-gen-op-defs"],
            "include/columnar/Ops.cpp.inc",
        ),
        (
            ["-gen-pass-decls"],
            "include/columnar/Passes.h.inc",
        ),
        (
            ["-gen-op-interface-decls"],
            "include/columnar/Interfaces.h.inc",
        ),
        (
            ["-gen-op-interface-defs"],
            "include/columnar/Interfaces.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "include/columnar/Columnar.td",
    deps = [":TdFiles"],
)

cc_library(
    name = "columnar",
    srcs = [
        "lib/AddSelectionVectors.cpp",
        "lib/Bufferize.cpp",
        "lib/Canonicalize.cpp",
        "lib/Columnar.cpp",
        "lib/LowerPipelines.cpp",
        "lib/LowerToLLVM.cpp",
        "lib/PushDownPredicates.cpp",
    ],
    hdrs = [
        "include/columnar/Columnar.h",
    ],
    includes = ["include/"],
    deps = [
        ":IncGen",
        "@llvm-project//mlir:ArithDialect",
        "@llvm-project//mlir:ArithToLLVM",
        "@llvm-project//mlir:ArithTransforms",
        "@llvm-project//mlir:BufferizationTransforms",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:FuncToLLVM",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:InferTypeOpInterface",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:LinalgTransforms",
        "@llvm-project//mlir:MemRefToLLVM",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:SideEffectInterfaces",
        "@llvm-project//mlir:TensorDialect",
        "@llvm-project//mlir:TensorTransforms",
        "@llvm-project//mlir:Transforms",
    ],
)

cc_binary(
    name = "mlir-opt",
    srcs = ["mlir-opt.cpp"],
    visibility = ["//visibility:public"],
    deps = [
        ":columnar",
        "@llvm-project//mlir:ConversionPasses",
        "@llvm-project//mlir:MlirOptLib",
        "@llvm-project//mlir:Transforms",
    ],
)

cc_proto_library(
    name = "libpg_query_cc_proto",
    deps = ["@libpg_query//:proto"],
)

cc_binary(
    name = "translate",
    srcs = ["translate.cpp"],
    visibility = ["//visibility:public"],
    deps = [
        ":columnar",
        ":libpg_query_cc_proto",
        "@libpg_query",
        "@llvm-project//mlir:TranslateLib",
    ],
)
