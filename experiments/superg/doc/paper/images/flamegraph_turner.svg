<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="89"><g><title>perf_5.10 (6 samples, 6.74%)</title><rect x="0.0000%" y="501" width="6.7416%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="511.50">perf_5.10</text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 6.74%)</title><rect x="0.0000%" y="485" width="6.7416%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="495.50">entry_SYS..</text></g><g><title>do_syscall_64 (6 samples, 6.74%)</title><rect x="0.0000%" y="469" width="6.7416%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50">do_syscal..</text></g><g><title>__x64_sys_execve (6 samples, 6.74%)</title><rect x="0.0000%" y="453" width="6.7416%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="463.50">__x64_sys..</text></g><g><title>do_execveat_common (6 samples, 6.74%)</title><rect x="0.0000%" y="437" width="6.7416%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="447.50">do_execve..</text></g><g><title>bprm_execve (6 samples, 6.74%)</title><rect x="0.0000%" y="421" width="6.7416%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="431.50">bprm_exec..</text></g><g><title>load_elf_binary (6 samples, 6.74%)</title><rect x="0.0000%" y="405" width="6.7416%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="415.50">load_elf_..</text></g><g><title>begin_new_exec (6 samples, 6.74%)</title><rect x="0.0000%" y="389" width="6.7416%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="399.50">begin_new..</text></g><g><title>perf_event_exec (6 samples, 6.74%)</title><rect x="0.0000%" y="373" width="6.7416%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="383.50">perf_even..</text></g><g><title>[perf-8542.map] (13 samples, 14.61%)</title><rect x="6.7416%" y="485" width="14.6067%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="13"/><text x="6.9916%" y="495.50">[perf-8542.map]</text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.12%)</title><rect x="21.3483%" y="373" width="1.1236%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="1"/><text x="21.5983%" y="383.50"></text></g><g><title>std::rt::cleanup (1 samples, 1.12%)</title><rect x="21.3483%" y="357" width="1.1236%" height="15" fill="rgb(240,193,28)" fg:x="19" fg:w="1"/><text x="21.5983%" y="367.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 1.12%)</title><rect x="21.3483%" y="341" width="1.1236%" height="15" fill="rgb(216,20,37)" fg:x="19" fg:w="1"/><text x="21.5983%" y="351.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 1.12%)</title><rect x="21.3483%" y="325" width="1.1236%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="1"/><text x="21.5983%" y="335.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 1.12%)</title><rect x="21.3483%" y="309" width="1.1236%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="1"/><text x="21.5983%" y="319.50"></text></g><g><title>std::rt::cleanup::{{closure}} (1 samples, 1.12%)</title><rect x="21.3483%" y="293" width="1.1236%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="1"/><text x="21.5983%" y="303.50"></text></g><g><title>std::sys::unix::cleanup (1 samples, 1.12%)</title><rect x="21.3483%" y="277" width="1.1236%" height="15" fill="rgb(225,20,46)" fg:x="19" fg:w="1"/><text x="21.5983%" y="287.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::cleanup (1 samples, 1.12%)</title><rect x="21.3483%" y="261" width="1.1236%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="1"/><text x="21.5983%" y="271.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 1.12%)</title><rect x="21.3483%" y="245" width="1.1236%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="1"/><text x="21.5983%" y="255.50"></text></g><g><title>__GI_munmap (1 samples, 1.12%)</title><rect x="21.3483%" y="229" width="1.1236%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="1"/><text x="21.5983%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 1.12%)</title><rect x="21.3483%" y="213" width="1.1236%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="1"/><text x="21.5983%" y="223.50"></text></g><g><title>do_syscall_64 (1 samples, 1.12%)</title><rect x="21.3483%" y="197" width="1.1236%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="1"/><text x="21.5983%" y="207.50"></text></g><g><title>__x64_sys_munmap (1 samples, 1.12%)</title><rect x="21.3483%" y="181" width="1.1236%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="1"/><text x="21.5983%" y="191.50"></text></g><g><title>__vm_munmap (1 samples, 1.12%)</title><rect x="21.3483%" y="165" width="1.1236%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="1"/><text x="21.5983%" y="175.50"></text></g><g><title>__do_munmap (1 samples, 1.12%)</title><rect x="21.3483%" y="149" width="1.1236%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="1"/><text x="21.5983%" y="159.50"></text></g><g><title>unmap_region (1 samples, 1.12%)</title><rect x="21.3483%" y="133" width="1.1236%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="1"/><text x="21.5983%" y="143.50"></text></g><g><title>unmap_vmas (1 samples, 1.12%)</title><rect x="21.3483%" y="117" width="1.1236%" height="15" fill="rgb(225,111,53)" fg:x="19" fg:w="1"/><text x="21.5983%" y="127.50"></text></g><g><title>unmap_page_range (1 samples, 1.12%)</title><rect x="21.3483%" y="101" width="1.1236%" height="15" fill="rgb(238,160,17)" fg:x="19" fg:w="1"/><text x="21.5983%" y="111.50"></text></g><g><title>__libc_start_main (2 samples, 2.25%)</title><rect x="21.3483%" y="469" width="2.2472%" height="15" fill="rgb(214,148,48)" fg:x="19" fg:w="2"/><text x="21.5983%" y="479.50">_..</text></g><g><title>main (2 samples, 2.25%)</title><rect x="21.3483%" y="453" width="2.2472%" height="15" fill="rgb(232,36,49)" fg:x="19" fg:w="2"/><text x="21.5983%" y="463.50">m..</text></g><g><title>std::rt::lang_start_internal (2 samples, 2.25%)</title><rect x="21.3483%" y="437" width="2.2472%" height="15" fill="rgb(209,103,24)" fg:x="19" fg:w="2"/><text x="21.5983%" y="447.50">s..</text></g><g><title>std::panic::catch_unwind (2 samples, 2.25%)</title><rect x="21.3483%" y="421" width="2.2472%" height="15" fill="rgb(229,88,8)" fg:x="19" fg:w="2"/><text x="21.5983%" y="431.50">s..</text></g><g><title>std::panicking::try (2 samples, 2.25%)</title><rect x="21.3483%" y="405" width="2.2472%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="2"/><text x="21.5983%" y="415.50">s..</text></g><g><title>std::panicking::try::do_call (2 samples, 2.25%)</title><rect x="21.3483%" y="389" width="2.2472%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="2"/><text x="21.5983%" y="399.50">s..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 1.12%)</title><rect x="22.4719%" y="373" width="1.1236%" height="15" fill="rgb(241,83,37)" fg:x="20" fg:w="1"/><text x="22.7219%" y="383.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.12%)</title><rect x="22.4719%" y="357" width="1.1236%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="1"/><text x="22.7219%" y="367.50"></text></g><g><title>std::panicking::try (1 samples, 1.12%)</title><rect x="22.4719%" y="341" width="1.1236%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="1"/><text x="22.7219%" y="351.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.12%)</title><rect x="22.4719%" y="325" width="1.1236%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="1"/><text x="22.7219%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 1.12%)</title><rect x="22.4719%" y="309" width="1.1236%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="1"/><text x="22.7219%" y="319.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 1.12%)</title><rect x="22.4719%" y="293" width="1.1236%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="1"/><text x="22.7219%" y="303.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 1.12%)</title><rect x="22.4719%" y="277" width="1.1236%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="1"/><text x="22.7219%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.12%)</title><rect x="22.4719%" y="261" width="1.1236%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="22.7219%" y="271.50"></text></g><g><title>tigre_fib::main (1 samples, 1.12%)</title><rect x="22.4719%" y="245" width="1.1236%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="1"/><text x="22.7219%" y="255.50"></text></g><g><title>&lt;superg::tigre::TigreEngine as superg::Engine&gt;::compile (1 samples, 1.12%)</title><rect x="22.4719%" y="229" width="1.1236%" height="15" fill="rgb(213,116,39)" fg:x="20" fg:w="1"/><text x="22.7219%" y="239.50"></text></g><g><title>superg::tigre::TigreEngine::init_cells (1 samples, 1.12%)</title><rect x="22.4719%" y="213" width="1.1236%" height="15" fill="rgb(222,207,29)" fg:x="20" fg:w="1"/><text x="22.7219%" y="223.50"></text></g><g><title>asm_exc_page_fault (1 samples, 1.12%)</title><rect x="22.4719%" y="197" width="1.1236%" height="15" fill="rgb(206,96,30)" fg:x="20" fg:w="1"/><text x="22.7219%" y="207.50"></text></g><g><title>exc_page_fault (1 samples, 1.12%)</title><rect x="22.4719%" y="181" width="1.1236%" height="15" fill="rgb(218,138,4)" fg:x="20" fg:w="1"/><text x="22.7219%" y="191.50"></text></g><g><title>do_user_addr_fault (1 samples, 1.12%)</title><rect x="22.4719%" y="165" width="1.1236%" height="15" fill="rgb(250,191,14)" fg:x="20" fg:w="1"/><text x="22.7219%" y="175.50"></text></g><g><title>handle_mm_fault (1 samples, 1.12%)</title><rect x="22.4719%" y="149" width="1.1236%" height="15" fill="rgb(239,60,40)" fg:x="20" fg:w="1"/><text x="22.7219%" y="159.50"></text></g><g><title>do_huge_pmd_anonymous_page (1 samples, 1.12%)</title><rect x="22.4719%" y="133" width="1.1236%" height="15" fill="rgb(206,27,48)" fg:x="20" fg:w="1"/><text x="22.7219%" y="143.50"></text></g><g><title>alloc_pages_vma (1 samples, 1.12%)</title><rect x="22.4719%" y="117" width="1.1236%" height="15" fill="rgb(225,35,8)" fg:x="20" fg:w="1"/><text x="22.7219%" y="127.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 1.12%)</title><rect x="22.4719%" y="101" width="1.1236%" height="15" fill="rgb(250,213,24)" fg:x="20" fg:w="1"/><text x="22.7219%" y="111.50"></text></g><g><title>get_page_from_freelist (1 samples, 1.12%)</title><rect x="22.4719%" y="85" width="1.1236%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="1"/><text x="22.7219%" y="95.50"></text></g><g><title>prep_new_page (1 samples, 1.12%)</title><rect x="22.4719%" y="69" width="1.1236%" height="15" fill="rgb(231,138,38)" fg:x="20" fg:w="1"/><text x="22.7219%" y="79.50"></text></g><g><title>kernel_init_free_pages (1 samples, 1.12%)</title><rect x="22.4719%" y="53" width="1.1236%" height="15" fill="rgb(231,145,46)" fg:x="20" fg:w="1"/><text x="22.7219%" y="63.50"></text></g><g><title>clear_page_rep (1 samples, 1.12%)</title><rect x="22.4719%" y="37" width="1.1236%" height="15" fill="rgb(251,118,11)" fg:x="20" fg:w="1"/><text x="22.7219%" y="47.50"></text></g><g><title>_start (3 samples, 3.37%)</title><rect x="21.3483%" y="485" width="3.3708%" height="15" fill="rgb(217,147,25)" fg:x="19" fg:w="3"/><text x="21.5983%" y="495.50">_st..</text></g><g><title>_dl_start (1 samples, 1.12%)</title><rect x="23.5955%" y="469" width="1.1236%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="1"/><text x="23.8455%" y="479.50"></text></g><g><title>_dl_start_final (1 samples, 1.12%)</title><rect x="23.5955%" y="453" width="1.1236%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="1"/><text x="23.8455%" y="463.50"></text></g><g><title>_dl_sysdep_start (1 samples, 1.12%)</title><rect x="23.5955%" y="437" width="1.1236%" height="15" fill="rgb(227,1,9)" fg:x="21" fg:w="1"/><text x="23.8455%" y="447.50"></text></g><g><title>[ld-2.31.so] (1 samples, 1.12%)</title><rect x="23.5955%" y="421" width="1.1236%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="1"/><text x="23.8455%" y="431.50"></text></g><g><title>_dl_relocate_object (1 samples, 1.12%)</title><rect x="23.5955%" y="405" width="1.1236%" height="15" fill="rgb(221,10,30)" fg:x="21" fg:w="1"/><text x="23.8455%" y="415.50"></text></g><g><title>_dl_protect_relro (1 samples, 1.12%)</title><rect x="23.5955%" y="389" width="1.1236%" height="15" fill="rgb(210,229,1)" fg:x="21" fg:w="1"/><text x="23.8455%" y="399.50"></text></g><g><title>__mprotect (1 samples, 1.12%)</title><rect x="23.5955%" y="373" width="1.1236%" height="15" fill="rgb(222,148,37)" fg:x="21" fg:w="1"/><text x="23.8455%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 1.12%)</title><rect x="23.5955%" y="357" width="1.1236%" height="15" fill="rgb(234,67,33)" fg:x="21" fg:w="1"/><text x="23.8455%" y="367.50"></text></g><g><title>do_syscall_64 (1 samples, 1.12%)</title><rect x="23.5955%" y="341" width="1.1236%" height="15" fill="rgb(247,98,35)" fg:x="21" fg:w="1"/><text x="23.8455%" y="351.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 1.12%)</title><rect x="23.5955%" y="325" width="1.1236%" height="15" fill="rgb(247,138,52)" fg:x="21" fg:w="1"/><text x="23.8455%" y="335.50"></text></g><g><title>do_mprotect_pkey (1 samples, 1.12%)</title><rect x="23.5955%" y="309" width="1.1236%" height="15" fill="rgb(213,79,30)" fg:x="21" fg:w="1"/><text x="23.8455%" y="319.50"></text></g><g><title>mprotect_fixup (1 samples, 1.12%)</title><rect x="23.5955%" y="293" width="1.1236%" height="15" fill="rgb(246,177,23)" fg:x="21" fg:w="1"/><text x="23.8455%" y="303.50"></text></g><g><title>__split_vma (1 samples, 1.12%)</title><rect x="23.5955%" y="277" width="1.1236%" height="15" fill="rgb(230,62,27)" fg:x="21" fg:w="1"/><text x="23.8455%" y="287.50"></text></g><g><title>__vma_adjust (1 samples, 1.12%)</title><rect x="23.5955%" y="261" width="1.1236%" height="15" fill="rgb(216,154,8)" fg:x="21" fg:w="1"/><text x="23.8455%" y="271.50"></text></g><g><title>vma_interval_tree_insert (1 samples, 1.12%)</title><rect x="23.5955%" y="245" width="1.1236%" height="15" fill="rgb(244,35,45)" fg:x="21" fg:w="1"/><text x="23.8455%" y="255.50"></text></g><g><title>comb_I (1 samples, 1.12%)</title><rect x="24.7191%" y="485" width="1.1236%" height="15" fill="rgb(251,115,12)" fg:x="22" fg:w="1"/><text x="24.9691%" y="495.50"></text></g><g><title>comb_K (2 samples, 2.25%)</title><rect x="25.8427%" y="485" width="2.2472%" height="15" fill="rgb(240,54,50)" fg:x="23" fg:w="2"/><text x="26.0927%" y="495.50">c..</text></g><g><title>comb_LIT (1 samples, 1.12%)</title><rect x="28.0899%" y="485" width="1.1236%" height="15" fill="rgb(233,84,52)" fg:x="25" fg:w="1"/><text x="28.3399%" y="495.50"></text></g><g><title>comb_S (1 samples, 1.12%)</title><rect x="29.2135%" y="485" width="1.1236%" height="15" fill="rgb(207,117,47)" fg:x="26" fg:w="1"/><text x="29.4635%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 1.12%)</title><rect x="37.0787%" y="453" width="1.1236%" height="15" fill="rgb(249,43,39)" fg:x="33" fg:w="1"/><text x="37.3287%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 1.12%)</title><rect x="37.0787%" y="437" width="1.1236%" height="15" fill="rgb(209,38,44)" fg:x="33" fg:w="1"/><text x="37.3287%" y="447.50"></text></g><g><title>irq_exit_rcu (1 samples, 1.12%)</title><rect x="37.0787%" y="421" width="1.1236%" height="15" fill="rgb(236,212,23)" fg:x="33" fg:w="1"/><text x="37.3287%" y="431.50"></text></g><g><title>do_softirq_own_stack (1 samples, 1.12%)</title><rect x="37.0787%" y="405" width="1.1236%" height="15" fill="rgb(242,79,21)" fg:x="33" fg:w="1"/><text x="37.3287%" y="415.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 1.12%)</title><rect x="37.0787%" y="389" width="1.1236%" height="15" fill="rgb(211,96,35)" fg:x="33" fg:w="1"/><text x="37.3287%" y="399.50"></text></g><g><title>__softirqentry_text_start (1 samples, 1.12%)</title><rect x="37.0787%" y="373" width="1.1236%" height="15" fill="rgb(253,215,40)" fg:x="33" fg:w="1"/><text x="37.3287%" y="383.50"></text></g><g><title>superg::tigre::Cell::set_call_addr (3 samples, 3.37%)</title><rect x="47.1910%" y="405" width="3.3708%" height="15" fill="rgb(211,81,21)" fg:x="42" fg:w="3"/><text x="47.4410%" y="415.50">sup..</text></g><g><title>superg::tigre::TigreEngine::make_cell (18 samples, 20.22%)</title><rect x="38.2022%" y="421" width="20.2247%" height="15" fill="rgb(208,190,38)" fg:x="34" fg:w="18"/><text x="38.4522%" y="431.50">superg::tigre::TigreEngine::make..</text></g><g><title>superg::tigre::TigreEngine::alloc_cell (7 samples, 7.87%)</title><rect x="50.5618%" y="405" width="7.8652%" height="15" fill="rgb(235,213,38)" fg:x="45" fg:w="7"/><text x="50.8118%" y="415.50">superg::tig..</text></g><g><title>superg::tigre::jit::JitMem::slice_mut (7 samples, 7.87%)</title><rect x="50.5618%" y="389" width="7.8652%" height="15" fill="rgb(237,122,38)" fg:x="45" fg:w="7"/><text x="50.8118%" y="399.50">superg::tig..</text></g><g><title>comb_S_need_align (29 samples, 32.58%)</title><rect x="30.3371%" y="485" width="32.5843%" height="15" fill="rgb(244,218,35)" fg:x="27" fg:w="29"/><text x="30.5871%" y="495.50">comb_S_need_align</text></g><g><title>make_s (29 samples, 32.58%)</title><rect x="30.3371%" y="469" width="32.5843%" height="15" fill="rgb(240,68,47)" fg:x="27" fg:w="29"/><text x="30.5871%" y="479.50">make_s</text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 24.72%)</title><rect x="38.2022%" y="453" width="24.7191%" height="15" fill="rgb(210,16,53)" fg:x="34" fg:w="22"/><text x="38.4522%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>superg::tigre::comb::make_s::{{closure}} (22 samples, 24.72%)</title><rect x="38.2022%" y="437" width="24.7191%" height="15" fill="rgb(235,124,12)" fg:x="34" fg:w="22"/><text x="38.4522%" y="447.50">superg::tigre::comb::make_s::{{closure}}</text></g><g><title>superg::tigre::comb::&lt;impl superg::tigre::TigreEngine&gt;::update_top_cell (4 samples, 4.49%)</title><rect x="58.4270%" y="421" width="4.4944%" height="15" fill="rgb(224,169,11)" fg:x="52" fg:w="4"/><text x="58.6770%" y="431.50">super..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 2.25%)</title><rect x="60.6742%" y="405" width="2.2472%" height="15" fill="rgb(250,166,2)" fg:x="54" fg:w="2"/><text x="60.9242%" y="415.50">c..</text></g><g><title>superg::tigre::Cell::set_call_addr (3 samples, 3.37%)</title><rect x="80.8989%" y="405" width="3.3708%" height="15" fill="rgb(242,216,29)" fg:x="72" fg:w="3"/><text x="81.1489%" y="415.50">sup..</text></g><g><title>superg::tigre::TigreEngine::make_cell (17 samples, 19.10%)</title><rect x="70.7865%" y="421" width="19.1011%" height="15" fill="rgb(230,116,27)" fg:x="63" fg:w="17"/><text x="71.0365%" y="431.50">superg::tigre::TigreEngine::ma..</text></g><g><title>superg::tigre::TigreEngine::alloc_cell (5 samples, 5.62%)</title><rect x="84.2697%" y="405" width="5.6180%" height="15" fill="rgb(228,99,48)" fg:x="75" fg:w="5"/><text x="84.5197%" y="415.50">superg:..</text></g><g><title>superg::tigre::jit::JitMem::slice_mut (4 samples, 4.49%)</title><rect x="85.3933%" y="389" width="4.4944%" height="15" fill="rgb(253,11,6)" fg:x="76" fg:w="4"/><text x="85.6433%" y="399.50">super..</text></g><g><title>comb_S_no_align (27 samples, 30.34%)</title><rect x="62.9213%" y="485" width="30.3371%" height="15" fill="rgb(247,143,39)" fg:x="56" fg:w="27"/><text x="63.1713%" y="495.50">comb_S_no_align</text></g><g><title>make_s (27 samples, 30.34%)</title><rect x="62.9213%" y="469" width="30.3371%" height="15" fill="rgb(236,97,10)" fg:x="56" fg:w="27"/><text x="63.1713%" y="479.50">make_s</text></g><g><title>core::ops::function::FnOnce::call_once (20 samples, 22.47%)</title><rect x="70.7865%" y="453" width="22.4719%" height="15" fill="rgb(233,208,19)" fg:x="63" fg:w="20"/><text x="71.0365%" y="463.50">core::ops::function::FnOnce::call_on..</text></g><g><title>superg::tigre::comb::make_s::{{closure}} (20 samples, 22.47%)</title><rect x="70.7865%" y="437" width="22.4719%" height="15" fill="rgb(216,164,2)" fg:x="63" fg:w="20"/><text x="71.0365%" y="447.50">superg::tigre::comb::make_s::{{closu..</text></g><g><title>superg::tigre::comb::&lt;impl superg::tigre::TigreEngine&gt;::update_top_cell (3 samples, 3.37%)</title><rect x="89.8876%" y="421" width="3.3708%" height="15" fill="rgb(220,129,5)" fg:x="80" fg:w="3"/><text x="90.1376%" y="431.50">sup..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 1.12%)</title><rect x="92.1348%" y="405" width="1.1236%" height="15" fill="rgb(242,17,10)" fg:x="82" fg:w="1"/><text x="92.3848%" y="415.50"></text></g><g><title>comb_cond_need_align (2 samples, 2.25%)</title><rect x="93.2584%" y="485" width="2.2472%" height="15" fill="rgb(242,107,0)" fg:x="83" fg:w="2"/><text x="93.5084%" y="495.50">c..</text></g><g><title>apply_cond (2 samples, 2.25%)</title><rect x="93.2584%" y="469" width="2.2472%" height="15" fill="rgb(251,28,31)" fg:x="83" fg:w="2"/><text x="93.5084%" y="479.50">a..</text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 2.25%)</title><rect x="93.2584%" y="453" width="2.2472%" height="15" fill="rgb(233,223,10)" fg:x="83" fg:w="2"/><text x="93.5084%" y="463.50">c..</text></g><g><title>superg::tigre::comb::apply_cond::{{closure}} (2 samples, 2.25%)</title><rect x="93.2584%" y="437" width="2.2472%" height="15" fill="rgb(215,21,27)" fg:x="83" fg:w="2"/><text x="93.5084%" y="447.50">s..</text></g><g><title>comb_lt (1 samples, 1.12%)</title><rect x="95.5056%" y="485" width="1.1236%" height="15" fill="rgb(232,23,21)" fg:x="85" fg:w="1"/><text x="95.7556%" y="495.50"></text></g><g><title>comb_min_no_align (1 samples, 1.12%)</title><rect x="96.6292%" y="485" width="1.1236%" height="15" fill="rgb(244,5,23)" fg:x="86" fg:w="1"/><text x="96.8792%" y="495.50"></text></g><g><title>apply_min (1 samples, 1.12%)</title><rect x="96.6292%" y="469" width="1.1236%" height="15" fill="rgb(226,81,46)" fg:x="86" fg:w="1"/><text x="96.8792%" y="479.50"></text></g><g><title>comb_plus_no_align (1 samples, 1.12%)</title><rect x="97.7528%" y="485" width="1.1236%" height="15" fill="rgb(247,70,30)" fg:x="87" fg:w="1"/><text x="98.0028%" y="495.50"></text></g><g><title>apply_plus (1 samples, 1.12%)</title><rect x="97.7528%" y="469" width="1.1236%" height="15" fill="rgb(212,68,19)" fg:x="87" fg:w="1"/><text x="98.0028%" y="479.50"></text></g><g><title>all (89 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="89"/><text x="0.2500%" y="527.50"></text></g><g><title>tigre_fib (83 samples, 93.26%)</title><rect x="6.7416%" y="501" width="93.2584%" height="15" fill="rgb(223,113,26)" fg:x="6" fg:w="83"/><text x="6.9916%" y="511.50">tigre_fib</text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 1.12%)</title><rect x="98.8764%" y="485" width="1.1236%" height="15" fill="rgb(206,192,2)" fg:x="88" fg:w="1"/><text x="99.1264%" y="495.50"></text></g><g><title>do_syscall_64 (1 samples, 1.12%)</title><rect x="98.8764%" y="469" width="1.1236%" height="15" fill="rgb(241,108,4)" fg:x="88" fg:w="1"/><text x="99.1264%" y="479.50"></text></g><g><title>__x64_sys_execve (1 samples, 1.12%)</title><rect x="98.8764%" y="453" width="1.1236%" height="15" fill="rgb(247,173,49)" fg:x="88" fg:w="1"/><text x="99.1264%" y="463.50"></text></g><g><title>do_execveat_common (1 samples, 1.12%)</title><rect x="98.8764%" y="437" width="1.1236%" height="15" fill="rgb(224,114,35)" fg:x="88" fg:w="1"/><text x="99.1264%" y="447.50"></text></g><g><title>bprm_execve (1 samples, 1.12%)</title><rect x="98.8764%" y="421" width="1.1236%" height="15" fill="rgb(245,159,27)" fg:x="88" fg:w="1"/><text x="99.1264%" y="431.50"></text></g><g><title>load_elf_binary (1 samples, 1.12%)</title><rect x="98.8764%" y="405" width="1.1236%" height="15" fill="rgb(245,172,44)" fg:x="88" fg:w="1"/><text x="99.1264%" y="415.50"></text></g><g><title>begin_new_exec (1 samples, 1.12%)</title><rect x="98.8764%" y="389" width="1.1236%" height="15" fill="rgb(236,23,11)" fg:x="88" fg:w="1"/><text x="99.1264%" y="399.50"></text></g><g><title>perf_event_comm (1 samples, 1.12%)</title><rect x="98.8764%" y="373" width="1.1236%" height="15" fill="rgb(205,117,38)" fg:x="88" fg:w="1"/><text x="99.1264%" y="383.50"></text></g><g><title>perf_iterate_sb (1 samples, 1.12%)</title><rect x="98.8764%" y="357" width="1.1236%" height="15" fill="rgb(237,72,25)" fg:x="88" fg:w="1"/><text x="99.1264%" y="367.50"></text></g><g><title>perf_iterate_ctx (1 samples, 1.12%)</title><rect x="98.8764%" y="341" width="1.1236%" height="15" fill="rgb(244,70,9)" fg:x="88" fg:w="1"/><text x="99.1264%" y="351.50"></text></g><g><title>perf_event_comm_output (1 samples, 1.12%)</title><rect x="98.8764%" y="325" width="1.1236%" height="15" fill="rgb(217,125,39)" fg:x="88" fg:w="1"/><text x="99.1264%" y="335.50"></text></g><g><title>__perf_event__output_id_sample (1 samples, 1.12%)</title><rect x="98.8764%" y="309" width="1.1236%" height="15" fill="rgb(235,36,10)" fg:x="88" fg:w="1"/><text x="99.1264%" y="319.50"></text></g></svg></svg>